use super::{SyncError, SyncResult};
use crate::models::preferences::SyncPreferences;
use chrono::Utc;
use html2md::parse_html;
use log::{debug, warn};
use shellexpand::tilde;
use std::fs;
use std::path::PathBuf;

const OUTPUT_FILENAME: &str = "What The Note.md";
const SOURCE_LABEL: &str = "What The Note";
const SYNC_WARNING: &str =
    "<!-- ⚠️ AUTO-SYNCED FROM WHAT THE NOTE — Do not edit this file directly -->";

pub fn export(content: &str, prefs: &SyncPreferences) -> SyncResult<()> {
    let base_path = resolve_base_path(prefs)?;

    fs::create_dir_all(&base_path)?;

    let markdown_body = convert_html_to_markdown(content);
    let timestamp = Utc::now().to_rfc3339();

    let mut sections: Vec<String> = Vec::new();

    if prefs.include_metadata {
        let metadata_banner = format!(
            "<!-- source: {} | sync-date: {} -->",
            SOURCE_LABEL, timestamp
        );
        sections.push(metadata_banner);
        sections.push(SYNC_WARNING.to_string());
    }

    sections.push(markdown_body.trim_end().to_string());

    let rendered = sections.join("\n\n");

    let output_path = base_path.join(OUTPUT_FILENAME);
    fs::write(&output_path, &rendered)?;
    debug!(
        "Markdown sync wrote {} bytes to {}",
        rendered.len(),
        output_path.display()
    );

    Ok(())
}

fn resolve_base_path(prefs: &SyncPreferences) -> SyncResult<PathBuf> {
    let raw_path = prefs
        .markdown_path
        .as_ref()
        .and_then(|p| {
            let trimmed = p.trim();
            if trimmed.is_empty() {
                None
            } else {
                Some(trimmed)
            }
        })
        .ok_or(SyncError::NotConfigured(
            "Markdown destination folder is not set",
        ))?;

    let expanded = tilde(raw_path).into_owned();
    let candidate = PathBuf::from(expanded);

    if candidate.is_file() {
        return Err(SyncError::NotConfigured(
            "Markdown destination must be a directory",
        ));
    }

    Ok(candidate)
}

fn convert_html_to_markdown(content: &str) -> String {
    if content.trim().is_empty() {
        warn!("Skipping markdown conversion - content is empty");
        return String::new();
    }

    parse_html(content)
}

#[cfg(test)]
mod tests {
    use super::*;
    use crate::services::sample::SAMPLE_NOTE_HTML;
    use tempfile::tempdir;

    #[test]
    fn writes_markdown_file_with_frontmatter() {
        let dir = tempdir().expect("tempdir");
        let prefs = SyncPreferences {
            markdown_enabled: true,
            markdown_path: Some(dir.path().to_string_lossy().to_string()),
            include_metadata: true,
            apple_notes_enabled: false,
            apple_notes_title: "".into(),
            apple_notes_folder: "".into(),
        };

        export("<h1>Hello</h1><p>World</p>", &prefs).expect("export success");

        let output_path = dir.path().join(OUTPUT_FILENAME);
        assert!(output_path.exists(), "output markdown missing");

        let content = fs::read_to_string(output_path).expect("read file");
        assert!(content.contains("source: What The Note | sync-date:"));
        assert!(content.contains(SYNC_WARNING));
        assert!(content.contains("Hello"));
        assert!(content.contains("World"));
    }

    #[test]
    fn skips_header_when_disabled() {
        let dir = tempdir().expect("tempdir");
        let prefs = SyncPreferences {
            markdown_enabled: true,
            markdown_path: Some(dir.path().to_string_lossy().to_string()),
            include_metadata: false,
            apple_notes_enabled: false,
            apple_notes_title: "".into(),
            apple_notes_folder: "".into(),
        };

        export("<p>Just text</p>", &prefs).expect("export success");

        let output_path = dir.path().join(OUTPUT_FILENAME);
        let content = fs::read_to_string(output_path).expect("read file");

        assert!(!content.contains("source: What The Note"));
        assert!(!content.contains(SYNC_WARNING));
        assert!(content.contains("Just text"));
    }

    #[test]
    fn sample_document_converts_to_markdown() {
        let markdown = convert_html_to_markdown(SAMPLE_NOTE_HTML);
        assert!(markdown.contains("Welcome to What The Note!"));
        assert!(markdown.contains("Quick Start"));
        assert!(markdown.contains("Show/Hide:"));
        assert!(markdown.contains("Features"));
        assert!(markdown.contains("Auto-save - your notes are saved instantly"));
        assert!(markdown.contains("Delete this text and start writing your notes!"));
    }
}
